// Generated by view binder compiler. Do not edit!
package com.example.mediassist.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mediassist.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPatientDashboardBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout PatientDashboard;

  @NonNull
  public final RecyclerView categoriesList;

  @NonNull
  public final TextView categoryPageBtn;

  @NonNull
  public final CardView clinicAcceptedAppointmentsCard;

  @NonNull
  public final CardView clinicCancelledAppointmentsCard;

  @NonNull
  public final CardView clinicDoctorCard;

  @NonNull
  public final CardView clinicPendingAppointmentsCard;

  @NonNull
  public final TextView error;

  @NonNull
  public final HorizontalScrollView hsv;

  @NonNull
  public final LinearLayout patientDashboardContent;

  @NonNull
  public final RecyclerView searchRv;

  @NonNull
  public final EditText searchText;

  private FragmentPatientDashboardBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout PatientDashboard, @NonNull RecyclerView categoriesList,
      @NonNull TextView categoryPageBtn, @NonNull CardView clinicAcceptedAppointmentsCard,
      @NonNull CardView clinicCancelledAppointmentsCard, @NonNull CardView clinicDoctorCard,
      @NonNull CardView clinicPendingAppointmentsCard, @NonNull TextView error,
      @NonNull HorizontalScrollView hsv, @NonNull LinearLayout patientDashboardContent,
      @NonNull RecyclerView searchRv, @NonNull EditText searchText) {
    this.rootView = rootView;
    this.PatientDashboard = PatientDashboard;
    this.categoriesList = categoriesList;
    this.categoryPageBtn = categoryPageBtn;
    this.clinicAcceptedAppointmentsCard = clinicAcceptedAppointmentsCard;
    this.clinicCancelledAppointmentsCard = clinicCancelledAppointmentsCard;
    this.clinicDoctorCard = clinicDoctorCard;
    this.clinicPendingAppointmentsCard = clinicPendingAppointmentsCard;
    this.error = error;
    this.hsv = hsv;
    this.patientDashboardContent = patientDashboardContent;
    this.searchRv = searchRv;
    this.searchText = searchText;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPatientDashboardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPatientDashboardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_patient_dashboard, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPatientDashboardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout PatientDashboard = (LinearLayout) rootView;

      id = R.id.categories_list;
      RecyclerView categoriesList = ViewBindings.findChildViewById(rootView, id);
      if (categoriesList == null) {
        break missingId;
      }

      id = R.id.category_page_btn;
      TextView categoryPageBtn = ViewBindings.findChildViewById(rootView, id);
      if (categoryPageBtn == null) {
        break missingId;
      }

      id = R.id.clinic_accepted_appointments_card;
      CardView clinicAcceptedAppointmentsCard = ViewBindings.findChildViewById(rootView, id);
      if (clinicAcceptedAppointmentsCard == null) {
        break missingId;
      }

      id = R.id.clinic_cancelled_appointments_card;
      CardView clinicCancelledAppointmentsCard = ViewBindings.findChildViewById(rootView, id);
      if (clinicCancelledAppointmentsCard == null) {
        break missingId;
      }

      id = R.id.clinic_doctor_card;
      CardView clinicDoctorCard = ViewBindings.findChildViewById(rootView, id);
      if (clinicDoctorCard == null) {
        break missingId;
      }

      id = R.id.clinic_pending_appointments_card;
      CardView clinicPendingAppointmentsCard = ViewBindings.findChildViewById(rootView, id);
      if (clinicPendingAppointmentsCard == null) {
        break missingId;
      }

      id = R.id.error;
      TextView error = ViewBindings.findChildViewById(rootView, id);
      if (error == null) {
        break missingId;
      }

      id = R.id.hsv;
      HorizontalScrollView hsv = ViewBindings.findChildViewById(rootView, id);
      if (hsv == null) {
        break missingId;
      }

      id = R.id.patient_dashboard_content;
      LinearLayout patientDashboardContent = ViewBindings.findChildViewById(rootView, id);
      if (patientDashboardContent == null) {
        break missingId;
      }

      id = R.id.search_rv;
      RecyclerView searchRv = ViewBindings.findChildViewById(rootView, id);
      if (searchRv == null) {
        break missingId;
      }

      id = R.id.search_text;
      EditText searchText = ViewBindings.findChildViewById(rootView, id);
      if (searchText == null) {
        break missingId;
      }

      return new FragmentPatientDashboardBinding((LinearLayout) rootView, PatientDashboard,
          categoriesList, categoryPageBtn, clinicAcceptedAppointmentsCard,
          clinicCancelledAppointmentsCard, clinicDoctorCard, clinicPendingAppointmentsCard, error,
          hsv, patientDashboardContent, searchRv, searchText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
